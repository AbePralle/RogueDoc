module RogueDoc

$include "Scanner.rogue"
$include "Parser.rogue" [optional]
uses RogueDoc
uses Console/CommandLineParser

try
  RogueDoc( System.command_line_arguments )
catch (error:CompileError)
  Console.error.println error
  System.exit 1
catch (error:Error)
  Console.error.println error
  Console.error.println error.stack_trace
  System.exit 1
endTry

class RogueDoc
  PROPERTIES
    command : Value

  METHODS
    method init( args:String[] )
      command = parse_args( args )

      # trace command
      # has //options and possibly //args

      if (command//options//help or command//args.count == 0)
        print_usage
        System.exit 0
      endIf

      if ($isDefined(PARSER_EXISTS)) parse_files
      else                           scan_files

    method scan_files
      forEach (arg in command//args)
        local filepath = arg->String
        local scanner = Scanner( File(filepath) )
        local tokens = scanner.tokenize
        println (forEach in tokens)
      endForEach

    method parse_files
      if ($isDefined(PARSER_EXISTS))
        local included_files = (String,Token[])[]

        forEach (arg in command//args)
          local filepath = arg->String
          local tokens = Scanner( File(filepath) ).tokenize
          included_files.add( (filepath,tokens) )
          Parser(tokens).preprocess
          Parser(tokens).[collecting_templates=true,disable_output=1].parse
          #local parser = Parser( File(filepath) )
          #local ast = parser.parse
          #@trace ast
        endForEach

        #trace included_files

        #local tokens = Scanner( File(filepath) ).tokenize
        #Analytics.tokenization.stop

        #Analytics.preprocessing.start
        #Parser( tokens ).preprocess
        #Analytics.preprocessing.stop

        #included_files[filepath] = IncludedFile( filepath, tokens, api )

        ## First parser pass collects class templates but does not build an AST
        #Analytics.parse_templates.start
        #Parser(tokens).[collecting_templates=true,disable_output=1,is_api=api].parse

      endIf

    method parse_args( args:String[] )->Value
      # This method is unrelated to the Froley Parser
      local command = CommandLineParser().
      [
        option( "--flag",     &alias="-f" )
        option( "--help",     &aliases=["-h","-?"] )
        option( "--setting=", &alias="-s" )
      ].parse( args )
      return command

    method print_usage
      println @|USAGE
               |  roguedoc [OPTIONS] <filepath>
               |
               |OPTIONS
               |  --help, -h, -?
               |    Show this help text.
endClass
